@using AlgorithmEasy.StudentSide.Services
@using Microsoft.AspNetCore.SignalR.Client
@implements IDisposable
@inject IJSRuntime _jsRuntime
@inject ProgramExecuteService _programExecutor

<terminal-container class="w-100 h-100">
    <pre>@((MarkupString) Output)</pre>
</terminal-container>

@code {

    string Output { get; set; }

    HubConnection PythonExecutorHubConnection { get; set; }

#nullable enable
    async void CLearTerminal(object? sender, EventArgs args)
    {
        Output = string.Empty;
        await InvokeAsync(StateHasChanged);
    }
#nullable disable

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
    }

    protected override async Task OnInitializedAsync()
    {
        _programExecutor.BeforeExecute += CLearTerminal;

        PythonExecutorHubConnection = new HubConnectionBuilder()
            .WithUrl(Environment.GetEnvironmentVariable("ALGORITHMEASY_PYTHON_EXECUTION_HUB"))
            .Build();
        PythonExecutorHubConnection.On<string>("ReceiveOutput",
            message =>
            {
                Output += message;
                StateHasChanged();
            });

        await PythonExecutorHubConnection.StartAsync();
        await base.OnInitializedAsync();
    }

    public void Dispose()
    {
        _programExecutor.BeforeExecute -= CLearTerminal;
    }

}