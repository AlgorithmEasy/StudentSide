@using AlgorithmEasy.StudentSide.Services
@implements IDisposable
@inject IJSRuntime _jsRuntime
@inject ProgramExecuteService _programExecutor

<terminal-container class="w-100 h-100">
    <pre>@((MarkupString) Output)</pre>
</terminal-container>

@code {

    string Output { get; set; }

#nullable enable
    async void CLearTerminal(object? sender, EventArgs args)
    {
        Output = string.Empty;
        await InvokeAsync(StateHasChanged);
    }
    async void AppendOutput(object? sender, string message)
    {
        Output += message;
        await InvokeAsync(StateHasChanged);
    }
#nullable disable

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await _jsRuntime.InvokeVoidAsync("Terminal.TerminalScrollToBottom");
        await base.OnAfterRenderAsync(firstRender);
    }

    protected override Task OnInitializedAsync()
    {
        _programExecutor.BeforeExecute += CLearTerminal;
        _programExecutor.OnReceiveOutput += AppendOutput;
        return base.OnInitializedAsync();
    }

    public void Dispose()
    {
        _programExecutor.BeforeExecute -= CLearTerminal;
        _programExecutor.OnReceiveOutput -= AppendOutput;
    }

}