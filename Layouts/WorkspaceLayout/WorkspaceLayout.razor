@using AlgorithmEasy.StudentSide.Layouts.WorkspaceLayout.Components
@using AlgorithmEasy.StudentSide.Services
@using AlgorithmEasy.StudentSide.Shared.Enums
@inherits LayoutComponentBase
@layout MainLayout
@implements IDisposable
@inject IJSRuntime _jsRuntime
@inject ProgramExecuteService _programExecutor
@inject ProjectManageService _projectManager

<CascadingValue Value="@this">
    <workspace-layout-container class="d-flex vw-100 h-100">
        <left class="h-100">
            <source-list-container class="w-100 h-100 d-flex flex-column">
                <top-row class="w-100 d-flex justify-content-end align-items-center px-3">
                    @if (Page == Page.Project)
                    {
                        <i class="fas fa-save mx-1 fa-lg" @onclick="@SaveProject"></i>
                        <i class="fas fa-plus mx-1 fa-lg" @onclick="@OpenCreateProjectDialog"></i>
                    }
                </top-row>
                @Body
            </source-list-container>
        </left>
        <right class="h-100 d-flex flex-column">
            <display-container class="w-100 h-100 d-flex flex-column">
                <top-row class="w-100 d-flex justify-content-end align-items-center px-5">
                    @if (Page == Page.Course)
                    {
                        @if (Display.HasFlag(DisplayType.CourseViewer))
                        {
                            <i class="fas fa-book mx-1 fa-lg" @onclick="@HideCourseViewer"></i>
                        }
                        else
                        {
                            <i class="fas fa-book-open mx-1 fa-lg" @onclick="@DisplayCourseViewer"></i>
                        }
                    }
                    @switch (Workspace?.Type)
                    {
                        case Workspace.DisplayMode.Blockly:
                            <i class="fas fa-code mx-1 fa-lg" @onclick="@DisplayPython"></i>
                            break;
                        case Workspace.DisplayMode.Python:
                            <i class="fas fa-cubes mx-1 fa-lg" @onclick="@DisplayBlockly"></i>
                            break;
                    }
                    @if (_programExecutor.Running)
                    {
                        <i class="fas fa-sync fa-spin fa-pulse mx-1 fa-lg"></i>
                    }
                    else
                    {
                        <i class="fas fa-play mx-1 fa-lg" @onclick="ExecuteBlockly"></i>
                    }
                </top-row>
                <display-body class="w-100 h-75 d-flex">
                    <blockly class="w-100 h-100 p-2" hidden="@(!Display.HasFlag(DisplayType.Workspace))">
                        <Workspace @ref="Workspace"></Workspace>
                    </blockly>
                    <div class="w-100 h-100 overflow-auto p-2" hidden="@(!Display.HasFlag(DisplayType.CourseViewer))">
                        <CourseViewer></CourseViewer>
                    </div>
                </display-body>
                <display-footer id="terminal" class="w-100 h-25 p-2 overflow-auto">
                    <Terminal></Terminal>
                </display-footer>
            </display-container>
        </right>
    </workspace-layout-container>
</CascadingValue>
<mask id="blocklyMask" class="position-fixed" hidden="@(Page == Page.Project)"></mask>

@if (Dialog == DialogType.CreateProject)
{
    <CreateProjectDialog
        CreateProjectSucceededCallback="@(() => Display |= DisplayType.Workspace)"
        CloseDialogCallback="@CloseDialog"></CreateProjectDialog>
}

@code
{
    [CascadingParameter]
    public MainLayout Layout { get; set; }

    DisplayType _display;
    public DisplayType Display
    {
        get => _display;
        set
        {
            if (_display == value) return;
            _display = value;
            StateHasChanged();
        }
    }

    #region CourseViewer
    void DisplayCourseViewer()
    {
        Display |= DisplayType.CourseViewer;
        StateHasChanged();
    }
    void HideCourseViewer()
    {
        Display &= DisplayType.Workspace;
        StateHasChanged();
    }
    #endregion

    #region Workspace
    Workspace Workspace { get; set; }

    void DisplayBlockly()
    {
        if (!Display.HasFlag(DisplayType.Workspace)) return;
        Workspace.DisplayBlockly();
        StateHasChanged();
    }
    void DisplayPython()
    {
        if (!Display.HasFlag(DisplayType.Workspace)) return;
        Workspace.DisplayPython();
        StateHasChanged();
    }

#nullable enable
    void RerenderPlayIcon(object? sender, EventArgs args) => StateHasChanged();
#nullable disable

    async Task ExecuteBlockly()
    {
        var code = await _jsRuntime.InvokeAsync<string>("Blockly.workspaceToPython");
        _toastService.ShowSuccess("开始执行程序。", "执行程序");
        var (level, message) = await _programExecutor.ExecutePythonCode(code);
        _toastService.ShowToast(level, message, "执行程序");
    }

    async Task SaveProject()
    {
        var workspace = await _jsRuntime.InvokeAsync<string>("Blockly.exportWorkspace");
        _projectManager.StashProject(workspace);
        var (level, message) = await _projectManager.SaveProject();
        _toastService.ShowToast(level, message, "保存项目");
    }
    #endregion

    #region DialogParamters
    DialogType Dialog { get; set; }

    void OpenCreateProjectDialog()
    {
        Dialog = DialogType.CreateProject;
        StateHasChanged();
    }

    void CloseDialog()
    {
        Dialog = DialogType.None;
        StateHasChanged();
    }
    #endregion

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) {
            await _jsRuntime.InvokeVoidAsync("Terminal.TerminalScrollToBottom");
        }
        await _jsRuntime.InvokeVoidAsync("Blockly.resizeWorkspace", Page == Page.Course);
        await base.OnAfterRenderAsync(firstRender);
    }

    protected override Task OnInitializedAsync()
    {
        _programExecutor.BeforeExecute += RerenderPlayIcon;
        _programExecutor.AfterExecute += RerenderPlayIcon;
        return base.OnInitializedAsync();
    }

    public void Dispose()
    {
        _programExecutor.BeforeExecute -= RerenderPlayIcon;
        _programExecutor.AfterExecute -= RerenderPlayIcon;
    }

    public Page Page
    {
        get => Layout.Page;
        set
        {
            Layout.Page = value;
            StateHasChanged();
        }
    }

    public enum DialogType
    {
        None,
        CreateProject,
    }

    [Flags]
    public enum DisplayType
    {
        None = 0,
        Workspace,
        CourseViewer,
        Both = Workspace | CourseViewer,
    }
}