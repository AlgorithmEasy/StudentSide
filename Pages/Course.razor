@page "/Course"
@using AlgorithmEasy.StudentSide.Layouts.WorkspaceLayout
@using AlgorithmEasy.StudentSide.Services
@using AlgorithmEasy.StudentSide.Shared.Enums
@layout WorkspaceLayout
@implements IDisposable
@inject CourseManageService _courseManager
@inject IJSRuntime _jsRuntime

<div class="px-3 fs-3">我的课程</div>
<course-list>
    <ul class="list-group list-group-flush my-3">
        @foreach (var course in _courseManager.Courses)
        {
            var progress = _courseManager.LearningHistories
                .SingleOrDefault(h => h.CourseId == course.CourseId)?.Progress;
            @if (course.CourseId == _courseManager.CurrentCourse?.CourseId)
            {
                <li class="list-group-item active d-flex justify-content-between">
                    <span>@course.CourseDetail.Title</span>
                    <span>@(progress ?? 0)%</span>
                </li>
            }
            else
            {
                <li class="list-group-item d-flex justify-content-between" @onclick="@(() => LoadCourse(course))">
                    <span>@course.CourseDetail.Title</span>
                    <span>@(progress ?? 0)%</span>
                </li>
            }
        }
    </ul>
</course-list>

@code {

    [CascadingParameter]
    public WorkspaceLayout Layout { get; init; }

    void LoadCourse(AlgorithmEasy.Shared.Models.Course course)
    {
        Layout.Display = WorkspaceLayout.DisplayType.Both;
        _courseManager.LoadCourse(course);
    }

    #region CourseManagerDelegate
#nullable enable
    void CoursesSet(object? _, IEnumerable<AlgorithmEasy.Shared.Models.Course> courses) =>
        InvokeAsync(StateHasChanged);
    void LearningHistoriesSet(object? _, IEnumerable<AlgorithmEasy.Shared.Models.LearningHistory> learningHistories) =>
        InvokeAsync(StateHasChanged);
#nullable disable
    #endregion

    protected override async Task OnInitializedAsync()
    {
        Layout.Page = Page.Course;
        if (_courseManager.CurrentCourse == null)
            Layout.Display = WorkspaceLayout.DisplayType.None;
        else
            Layout.Display = WorkspaceLayout.DisplayType.Both;

        {
            var (level, message) = await _courseManager.GetCourses();
            if (level != ToastLevel.Success)
            {
                _toastService.ShowToast(level, message, "加载课程列表");
                await base.OnInitializedAsync();
                return;
            }
        }
        {
            var (level, message) = await _courseManager.GetPersonalLearningHistories();
            if (level != ToastLevel.Success)
            {
                _toastService.ShowToast(level, message, "获取学习记录");
                await base.OnInitializedAsync();
                return;
            }
        }

        _courseManager.OnCoursesSet += CoursesSet;
        _courseManager.OnLearningHistoriesSet += LearningHistoriesSet;
        await base.OnInitializedAsync();
    }

    public void Dispose()
    {
        _courseManager.OnCoursesSet -= CoursesSet;
        _courseManager.OnLearningHistoriesSet -= LearningHistoriesSet;
    }

}