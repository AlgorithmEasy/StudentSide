@page "/"
@using AlgorithmEasy.Shared.Requests
@using AlgorithmEasy.Shared.Statuses

<index-container>
    <div class="title">算法易</div>
    <EditForm class="form-group" EditContext="Context" OnValidSubmit="LoginSubmit">
        <DataAnnotationsValidator/>

        <p class="login-form-group">
            <InputText class="form-control login-form" placeholder="用户名" @bind-Value="LoginForm.UserId"/>
            <ValidationMessage For="() => LoginForm.UserId"/>
        </p>
        <p class="login-form-group">
            <InputText class="form-control login-form" type="password" placeholder="密码" @bind-Value="LoginForm.Password"/>
            <ValidationMessage For="() => LoginForm.Password"/>
        </p>
        <p class="login-form-group space-between">
            <span>
                <InputCheckbox @bind-Value="RememberPassword"></InputCheckbox>
                <span>记住密码</span>
            </span>
            <span>忘记密码？</span>
        </p>
        <div class="login-form-group">
            <button class="btn btn-primary login-form login-form-button blue-bg" type="submit">登 录</button>
        </div>
        <p class="text-end">
            还没有账户？<span class="text-primary">立即注册</span>
        </p>
    </EditForm>
</index-container>

@code
{
    [CascadingParameter]
    public MainLayout Layout { get; init; }

    LoginRequest LoginForm { get; set; }

    EditContext Context { get; set; }

    bool RememberPassword { get; set; }

    protected override Task OnInitializedAsync()
    {
        Layout.Page = Page.Index;
        LoginForm = new();
        Context = new(LoginForm);
        return base.OnInitializedAsync();
    }

    async void LoginSubmit()
    {
        if (string.IsNullOrEmpty(LoginForm.UserId) || string.IsNullOrEmpty(LoginForm.Password))
        {
            _toastService.ShowError("用户名或密码不得为空。", "登录失败");
            return;
        }

        var request = new LoginRequest
        {
            UserId = LoginForm.UserId,
            Password = (LoginForm.UserId + LoginForm.Password).GetSha256String()
        };

        switch (await _authenticationService.Login(request))
        {
            case LoginStatus.ConnectServerFailed:
                _toastService.ShowError("未能与远程服务器建立连接，请检查网络设置。", "登录失败");
                return;
            case LoginStatus.LoginFailed:
                _toastService.ShowError("用户名或密码错误。", "登录失败");
                return;
        }

        _navigation.NavigateTo("/project");
    }
}

