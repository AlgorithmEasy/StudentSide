@page "/"
@using AlgorithmEasy.Shared.Requests
@using AlgorithmEasy.Shared.Statuses
@using AlgorithmEasy.StudentSide.Shared.Enums
@using AlgorithmEasy.StudentSide.Pages.Index.Components

<style>
html, body {
    background-image: url("images/background.jfif");
    background-size: cover;
}
</style>

<index-container class="vh-100 d-flex align-items-stretch flex-column justify-content-center flex-nowrap position-fixed top-0">
    <div class="title text-center mb-3">算法易</div>
    <EditForm class="form-group" EditContext="Context" OnValidSubmit="LoginSubmit">
        <DataAnnotationsValidator/>

        <div class="px-2 mb-3">
            <InputText class="form-control login-form bg-white" placeholder="用户名" @bind-Value="LoginForm.UserId"/>
            <ValidationMessage For="() => LoginForm.UserId"/>
        </div>

        <div class="px-2 mb-3">
            <InputText class="form-control login-form bg-white" type="password" placeholder="密码" @bind-Value="LoginForm.Password"/>
            <ValidationMessage For="() => LoginForm.Password"/>
        </div>

        <div class="px-2 mb-2 d-flex justify-content-between">
            <span>
                <InputCheckbox disabled @bind-Value="RememberPassword"></InputCheckbox>
                <span>记住密码</span>
            </span>
            <span>忘记密码？</span>
        </div>
        <div class="px-2">
            <button class="btn btn-primary rounded-pill form-control login-form-button" type="submit">登 录</button>
        </div>
        <div class="form-text text-end px-2">
            还没有账户？<span class="text-primary text-decoration-underline clickable"
                        @onclick="@(() => Type = DisplayDialog.Register)">立即注册</span>
        </div>
    </EditForm>
</index-container>
@if (Type == DisplayDialog.Register)
{
    <RegisterDialog CloseDialogCallback="CloseRegister"></RegisterDialog>
}

@code
{
    [CascadingParameter]
    public MainLayout Layout { get; init; }

    LoginRequest LoginForm { get; set; }
    EditContext Context { get; set; }

    DisplayDialog Type { get; set; } = DisplayDialog.None;

    bool RememberPassword { get; set; }

    protected override Task OnInitializedAsync()
    {
        Layout.Page = Page.Index;
        LoginForm = new();
        Context = new(LoginForm);
        return base.OnInitializedAsync();
    }

    async void LoginSubmit()
    {
        if (string.IsNullOrEmpty(LoginForm.UserId) || string.IsNullOrEmpty(LoginForm.Password))
        {
            _toastService.ShowError("用户名或密码不得为空。", "登录失败");
            return;
        }

        var request = new LoginRequest
        {
            UserId = LoginForm.UserId,
            Password = (LoginForm.UserId + LoginForm.Password).GetSha256String()
        };

        switch (await _authenticationService.Login(request))
        {
            case LoginStatus.ConnectServerFailed:
                _toastService.ShowError("未能与远程服务器建立连接，请检查网络设置。", "登录失败");
                return;
            case LoginStatus.LoginFailed:
                _toastService.ShowError("用户名或密码错误。", "登录失败");
                return;
        }

        _navigation.NavigateTo("/project");
    }

    async void CloseRegister()
    {
        Type = DisplayDialog.None;
        await InvokeAsync(StateHasChanged);
    }

    enum DisplayDialog
    {
        None,
        Register,
        FindPassword,
    }
}

