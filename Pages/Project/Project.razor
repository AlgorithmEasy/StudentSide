@page "/Project"
@using AlgorithmEasy.StudentSide.Layouts.WorkspaceLayout
@using AlgorithmEasy.StudentSide.Services
@using AlgorithmEasy.StudentSide.Shared.Enums
@using AlgorithmEasy.StudentSide.Pages.Project.Components
@using AlgorithmEasy.StudentSide.Shared.Components
@layout WorkspaceLayout
@inject ProjectManageService _projectManager
@inject IJSRuntime _jsRuntime
@implements IDisposable

<div class="w-100 px-3 fs-3">我的项目</div>
<project-list class="w-100">
    <ul class="list-group list-group-flush my-3">
        @foreach (var project in _projectManager.Projects)
        {
            @if (project.ProjectName == _projectManager.CurrentProject?.ProjectName)
            {
                <li class="list-group-item active">@project.ProjectName</li>
            }
            else
            {
                <li class="list-group-item" @onclick="@(() => SaveProjectBeforeLoad(project))">@project.ProjectName</li>
            }
        }
    </ul>
</project-list>
@switch (Type)
{
    case DialogType.Rename:
        <RenameProjectDialog OldProjectName="@OldProjectName" CloseDialogCallback="@CloseDialog"></RenameProjectDialog>
        break;
    case DialogType.SaveProject:
        <SaveProjectDialog
            SubmitSucceededCallback="OnSaveProjectSucceeded"
            CloseDialogCallback="@CloseDialog"></SaveProjectDialog>
        break;
}

@code {

    [CascadingParameter]
    public WorkspaceLayout Layout { get; init; }

    DialogType Type { get; set; }

#region ProjectManagerDelegate
#nullable enable
    void ProjectsChanged(object? _, IEnumerable<AlgorithmEasy.Shared.Models.Project> projects) => InvokeAsync(StateHasChanged);

    async void CurrentProjectChanged(object? _, AlgorithmEasy.Shared.Models.Project? project)
    {
        if (string.IsNullOrEmpty(project?.Workspace))
            await _jsRuntime.InvokeVoidAsync("Blockly.clearWorkspace");
        else
            await _jsRuntime.InvokeVoidAsync("Blockly.importWorkspace", project.Workspace);
        StateHasChanged();
    }
#nullable disable
#endregion

#region DialogParamters
    string OldProjectName { get; set; }
    AlgorithmEasy.Shared.Models.Project NextProject { get; set; }

    void SaveProjectBeforeLoad(AlgorithmEasy.Shared.Models.Project project)
    {
        if (_projectManager.CurrentProject == null)
        {
            Layout.Display |= WorkspaceLayout.DisplayType.Workspace;
            _projectManager.LoadProject(project);
            StateHasChanged();
            return;
        }
        NextProject = project;
        Type = DialogType.SaveProject;
        StateHasChanged();
    }

    void OnSaveProjectSucceeded() => _projectManager.LoadProject(NextProject);
    void CloseDialog()
    {
        Type = DialogType.None;
        Layout.Display |= WorkspaceLayout.DisplayType.Workspace;
        StateHasChanged();
    }
    #endregion

    protected override async Task OnInitializedAsync()
    {
        Layout.Page = Page.Project;
        if (_projectManager.CurrentProject == null)
            Layout.Display = WorkspaceLayout.DisplayType.None;
        else
            Layout.Display = WorkspaceLayout.DisplayType.Workspace;

        {
            var (level, message) = await _projectManager.GetPersonalProjects();
            if (level != ToastLevel.Success)
            {
                _toastService.ShowToast(level, message, "加载项目列表");
                await base.OnInitializedAsync();
                return;
            }
        }

        _projectManager.OnProjectsSet += ProjectsChanged;
        _projectManager.OnCurrentProjectChanged += CurrentProjectChanged;
        await base.OnInitializedAsync();
    }

    public void Dispose()
    {
        _projectManager.OnProjectsSet -= ProjectsChanged;
        _projectManager.OnCurrentProjectChanged -= CurrentProjectChanged;
    }

    enum DialogType
    {
        None,
        Rename,
        SaveProject,
    }
}